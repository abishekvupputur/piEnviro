name: Docker Image CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: write   # needed to create a release

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Extract the image name/tag from docker-compose.yml
      # Example line: "image: pienviro:0.2"
      - name: Read image from compose
        id: meta
        run: |
          set -euo pipefail
          IMAGE=$(grep -E '^[[:space:]]*image:[[:space:]]*' docker-compose.yml | head -n1 | awk '{print $2}')
          if [ -z "${IMAGE:-}" ]; then
            echo "No 'image:' found in docker-compose.yml" >&2
            exit 1
          fi
          SAFE_IMAGE=${IMAGE//[:\/]/-}
          echo "IMAGE=$IMAGE" >> "$GITHUB_ENV"
          echo "SAFE_IMAGE=$SAFE_IMAGE" >> "$GITHUB_ENV"
          echo "Resolved image: $IMAGE -> safe: $SAFE_IMAGE"

      - name: Build image (docker compose)
        run: |
          docker compose build --build-arg BUILDKIT_INLINE_CACHE=1

      - name: Export image as artifact
        run: |
          set -euo pipefail
          mkdir -p out
          TAR="out/${SAFE_IMAGE}.tar"
          echo "Saving ${IMAGE} -> ${TAR}.gz"
          docker save -o "${TAR}" "${IMAGE}"
          gzip -9 "${TAR}"
          ls -lh out

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ env.SAFE_IMAGE }}
          path: out/*.tar.gz
          if-no-files-found: error
          compression-level: 0   # already gzipped

      - name: Compose config (debug)
        run: docker compose config > compose.effective.yml

      - name: Upload compose config
        uses: actions/upload-artifact@v4
        with:
          name: compose-effective-${{ github.run_id }}
          path: compose.effective.yml

      # -------- Pre-release publishing (pushes only) --------
      - name: Derive release metadata
        if: ${{ github.event_name == 'push' }}
        id: relmeta
        run: |
          set -euo pipefail
          # IMAGE like "pienviro:0.2" -> APP="pienviro", VERSION="0.2"
          APP="${IMAGE%%:*}"
          VERSION="${IMAGE##*:}"
          if [ "$APP" = "$VERSION" ]; then
            # No tag present; fallback to run number
            VERSION="build-${{ github.run_number }}"
          fi
          SAFE_APP=${APP//\//-}
          RELEASE_TAG="${SAFE_APP}-${VERSION}-pre"
          RELEASE_NAME="Pre-release ${SAFE_APP}:${VERSION}"
          ASSET_GLOB="out/${SAFE_IMAGE}.tar.gz"

          echo "APP=$APP" >> "$GITHUB_ENV"
          echo "VERSION=$VERSION" >> "$GITHUB_ENV"
          echo "RELEASE_TAG=$RELEASE_TAG" >> "$GITHUB_ENV"
          echo "RELEASE_NAME=$RELEASE_NAME" >> "$GITHUB_ENV"
          echo "ASSET_GLOB=$ASSET_GLOB" >> "$GITHUB_ENV"

          echo "Tag: $RELEASE_TAG"
          echo "Name: $RELEASE_NAME"
          echo "Assets: $ASSET_GLOB"

      - name: Create GitHub pre-release
        if: ${{ github.event_name == 'push' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: ${{ env.RELEASE_NAME }}
          body: |
            Automated pre-release for **${{ env.IMAGE }}**
            - Commit: ${{ github.sha }}
            - Workflow run: ${{ github.run_id }}
          draft: false
          prerelease: true
          files: |
            ${{ env.ASSET_GLOB }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
